{"name":"Androiddbhelper","tagline":"Android DbHelper","body":"DbHelper for android\r\n\r\nCreating an instance of DbHelper:\r\n\r\n```java\r\npublic class MainActivity extends Activity  \r\n\timplements DbHelper.OnDatabaseLoadedListener{\r\n\r\n\tprivate DatabaseSchema mSchema = null;\r\n\tprivate DbHelper mDbHelper = null;\r\n\t\r\n\t@Override\r\n\tpublic void onCreate(Bundle b){\r\n\t\tsuper.onCreate(b);\r\n\t\tmSchema = new DatabaseSchema();\r\n\t\tmSchema.Version = 1;\r\n\t\tmSchema.Context = this.getApplicationContext();\r\n\t\tmSchema.Location = DatabaseSchema.DatabaseLocation.ApplicationData;\r\n\t\tmSchema.Name = \"Test.db\";\r\n\t\tmSchema.CursorFactory = null;\r\n\t\tmSchema.OnCreateScrips = new String[]{\r\n\t\t\t\t\"CREATE TABLE IF NOT EXISTS test1 (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)\",\r\n\t\t\t\t\"CREATE TABLE IF NOT EXISTS test2 (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)\"\r\n\t\t};\r\n\t\tboolean async = true;\r\n\t\tDbHelper.OnDatabaseLoadedListener listener = this;\r\n\t\tmDbHelper = DbHelper.getInstance(mSchema, async, listener);\r\n\t}\r\n}\r\n```\r\n\t\r\nOnce the database is loaded you can start executing queries:\r\n\r\n```java\r\npublic class MainActivity extends Activity  \r\n\timplements DbHelper.OnDatabaseLoadedListener, \r\n\t\t\t\tSQLiteInsertStatement.OnResultListener, \r\n\t\t\t\tSQLiteSelectStatement.OnResultListener {\r\n\r\n\t...\r\n\t\r\n\t@Override\r\n\tpublic void onDatabaseLoaded() {\r\n\t\tLog.d(\"Database\", \"Database loaded\");\r\n\t\t\r\n\t\tSQLiteInsertStatement insertStatement = new SQLiteInsertStatement();\r\n\t\t\r\n\t\tContentValues values = new ContentValues();\r\n\t\tvalues.put(\"name\", \"Test name\");\r\n\t\tinsertStatement.setContentValues(values);\r\n\t\tinsertStatement.setTable(\"test\");\r\n\t\tinsertStatement.setOnResultListener(this);\r\n\t\tmDbHelper.Execute(insertStatement);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onDatabaseError(String error) {\r\n\t\tLog.e(\"Database\", error);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onInsertResult(SQLiteInsertStatement statement, long insertedId) {\r\n\t\tLog.d(\"Database\", \"Inserted: \" + insertedId);\r\n\t\t\r\n\t\tSQLiteSelectStatement selectStatement = new SQLiteSelectStatement();\r\n\t\tselectStatement.setQuery(\"SELECT name FROM test\");\r\n\t\tselectStatement.setOnResultListener(this);\r\n\t\tmDbHelper.Execute(selectStatement);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onStringResult(SQLiteSelectStatement statement, String result) {\r\n\t\tLog.d(\"Database\", \"Selected: \" + result);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onStringArrayResult(SQLiteSelectStatement statement,\r\n\t\t\tString[] result) {\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean onCursorResult(SQLiteSelectStatement statement, Cursor result) {\r\n\t\treturn true;\r\n\t}\r\n}\r\n```\r\n\r\nRemember to open and close the database when you aren't using it using:\r\n\r\n```java\r\n//This will open a new database object \r\n//if there isn't already one there\r\nmDbHelper.open(); \r\n\r\n//This will close the database object\r\n//and stop any transactions if needed\r\nmDbHelper.close();\r\n```\r\n\r\nIf you wish to use the database object yourself you can use\r\n\r\n```java\r\n//This will always get a Writable database\r\n//as you can both read and write from it\r\n//If their is one still open it will use\r\n//that\r\nmDbHelper.getDatabase();\r\n```\r\n\t\t\r\nTo create a database use a DatabaseSchema object, this will provide the details needed\r\nto create the DbHelper:\r\n\r\n```java\r\nDatabaseSchema schema = new DatabaseSchema();\r\n\r\n//This needs to be above 1\r\nschema.Version = 1;\r\n\r\n//The name of the database\r\nschema.Name = \"Test.db\";\r\n\r\n//You can specify whether you want the database to be stored\r\n//in a specific directory or with the applications data\r\n//schema.Location = DatabaseSchema.DatabaseLocation.Directory;\r\nschema.Location = DatabaseSchema.DatabaseLocation.ApplicationData;\r\n\r\n//When you specify schema.Location as directory set the directory\r\n//Make sure you have access to this\r\n//Also make sure you have write to external storage enabled\r\n//schema.Directory = \"/sdcard/TestDatabase/\";\r\n\r\n//When you have schema.Location as ApplicationData you\r\n//can set the context of the database\r\nschema.Context = this.getApplicationContext();\r\n\r\n//The CursorFactory for the database\r\n//null for default\r\nschema.CursorFactory = null;\r\n\r\n//The scripts to run when the database is created\r\nschema.OnCreateScrips = new String[]{\r\n\t\"CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)\"\r\n};\r\n\r\n//The scrips to run on each upgrade, the ones that are run are \r\n//set by changing the version number.\r\n\r\nDatabaseSchemaUpgrade upgrade = new DatabaseSchemaUpgrade();\r\n//This will only be run when the old version of the database is under 2\r\n//and the new version is equal to or over 2\r\nupgrade.UpgradeVersion = 2;\r\n\r\n//The scripts to run when this upgrade is run\r\nupgrade.OnUpgradeScripts = new String[]{\r\n\t\"DROP TABLE test\"\r\n};\r\n\r\n//Flag to say whether onCreate should be called post to running these scripts\r\n//This is good in the case of drop table scripts.\r\nupgrade.CreatePost = true;\r\n\r\n//Set the upgrade scripts to run\r\nmSchema.OnUpgradeScripts = new DatabaseSchemaUpgrade[]{upgrade};\r\n```\r\n\t\t\r\nYou can change whether to run the scripts in an asynchronous way or a synchronous way\r\n\r\n```java\r\n//tells us whether the database is running in an asynchronous way or not\r\nmDbHelper.isAsync();//This is the same as mDbHelper.isAsynchronous();\r\n\r\n//Default true, sets whether the database should run in an\r\n//asynchronous way\r\nmDbHelper.setAsync(true);//This is the same as mDbHelper.setAsynchronous(boolean async);\r\n```\r\n\t\t\r\nYou can specify different things when creating the database helper\r\n\r\n```java\r\n//Default constructor \r\nDbHelper dbHelper = DbHelper.getInstance(DatabaseSchema schema);\r\n\r\n//Specify a on database load listener\r\nDbHelper dbHelper = DbHelper.getInstance(DatabaseSchema schema, DbHelper.OnDatabaseLoadedListener listener);\r\n\r\n//Specify a on database load listener and whether the database is asynchronous\r\nDbHelper dbHelper = DbHelper.getInstance(DatabaseSchema schema, boolean async, DbHelper.OnDatabaseLoadedListener listener);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}